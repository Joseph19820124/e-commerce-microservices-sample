# Local Development Configuration for Spring Boot Services

spring:
  profiles:
    active: local
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://postgres-local:5432/ecommerce
    username: postgres
    password: password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          lob:
            non_contextual_creation: true

  # Redis Configuration
  redis:
    host: redis-local
    port: 6379
    timeout: 2000ms
    password: 
    database: 0
    jedis:
      pool:
        max-active: 50
        max-idle: 10
        min-idle: 5
        max-wait: 2000ms

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10 minutes
      cache-null-values: false

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /
  tomcat:
    threads:
      max: 50
      min-spare: 10
    max-connections: 200
    connection-timeout: 20000

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
    metrics:
      enabled: true
  health:
    redis:
      enabled: true
    db:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  server:
    port: 8080

# Logging Configuration
logging:
  level:
    com.ecommerce: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /tmp/cart-service-local.log

# Application Specific Configuration
app:
  name: cart-service
  version: local-dev
  environment: local
  
  # Circuit Breaker Configuration (Simplified for local)
  circuit-breaker:
    enabled: false
    
  # Event Configuration (Simplified for local)
  events:
    enabled: false
    
  # Security Configuration (Simplified for local)  
  security:
    jwt:
      enabled: false
    oauth2:
      enabled: false

---
# Product Service Configuration (Node.js)
# This would be used in products-cna-microservice/.env.local

PORT=3000
NODE_ENV=local
LOG_LEVEL=debug

# Database
DATABASE_URL=postgresql://postgres:password@postgres-local:5432/ecommerce
DB_HOST=postgres-local
DB_PORT=5432
DB_NAME=ecommerce
DB_USER=postgres
DB_PASSWORD=password
DB_POOL_MIN=2
DB_POOL_MAX=10

# Redis
REDIS_URL=redis://redis-local:6379
REDIS_HOST=redis-local
REDIS_PORT=6379
REDIS_DB=0

# Cache Settings
CACHE_TTL=600
CACHE_ENABLED=true

# API Settings
API_PREFIX=/api
API_VERSION=v1

# Health Check
HEALTH_CHECK_PATH=/health

---
# User Service Configuration (Python)
# This would be used in users-cna-microservice/.env.local

# Application
FLASK_ENV=development
FLASK_DEBUG=True
PORT=5000

# Database
DATABASE_URL=postgresql://postgres:password@postgres-local:5432/ecommerce
DB_HOST=postgres-local
DB_PORT=5432
DB_NAME=ecommerce
DB_USER=postgres
DB_PASSWORD=password

# Redis
REDIS_URL=redis://redis-local:6379
REDIS_HOST=redis-local
REDIS_PORT=6379

# Logging
LOG_LEVEL=DEBUG
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# Security (Simplified for local)
SECRET_KEY=local-development-secret-key
JWT_SECRET_KEY=local-jwt-secret
JWT_ACCESS_TOKEN_EXPIRES=3600

# Health Check
HEALTH_CHECK_ENABLED=True