apiVersion: v1
kind: Namespace
metadata:
  name: gatekeeper-system
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredlabels
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredLabels
      validation:
        type: object
        properties:
          labels:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredlabels

        violation[{"msg": msg}] {
          required := input.parameters.labels
          provided := input.review.object.metadata.labels
          missing := required[_]
          not provided[missing]
          msg := sprintf("You must provide labels: %v", [missing])
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredresources
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredResources
      validation:
        type: object
        properties:
          limits:
            type: array
            items:
              type: string
          requests:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredresources

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          required_limits := input.parameters.limits
          missing_limits := required_limits[_]
          not container.resources.limits[missing_limits]
          msg := sprintf("Container %v is missing required resource limit: %v", [container.name, missing_limits])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          required_requests := input.parameters.requests
          missing_requests := required_requests[_]
          not container.resources.requests[missing_requests]
          msg := sprintf("Container %v is missing required resource request: %v", [container.name, missing_requests])
        }
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sRequiredLabels
metadata:
  name: must-have-required-labels
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "ReplicaSet"]
    excludedNamespaces: ["kube-system", "gatekeeper-system", "istio-system"]
  parameters:
    labels: ["app", "version", "environment"]
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sRequiredResources
metadata:
  name: must-have-resources
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
    excludedNamespaces: ["kube-system", "gatekeeper-system", "istio-system"]
  parameters:
    limits: ["memory", "cpu"]
    requests: ["memory", "cpu"]
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spodnetworkpolicy
spec:
  crd:
    spec:
      names:
        kind: K8sPodNetworkPolicy
      validation:
        type: object
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spodnetworkpolicy

        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          input.review.object.metadata.namespace != "kube-system"
          input.review.object.metadata.namespace != "gatekeeper-system"
          input.review.object.metadata.namespace != "istio-system"
          not has_network_policy(input.review.object.metadata.namespace)
          msg := sprintf("Namespace %v must have a NetworkPolicy", [input.review.object.metadata.namespace])
        }

        has_network_policy(namespace) {
          # This would need to be checked against existing NetworkPolicies
          # For now, we'll assume it exists
          true
        }
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sPodNetworkPolicy
metadata:
  name: require-network-policy
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8ssecuritycontext
spec:
  crd:
    spec:
      names:
        kind: K8sSecurityContext
      validation:
        type: object
        properties:
          runAsNonRoot:
            type: boolean
          readOnlyRootFilesystem:
            type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8ssecuritycontext

        violation[{"msg": msg}] {
          input.parameters.runAsNonRoot == true
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := sprintf("Container %v must run as non-root user", [container.name])
        }

        violation[{"msg": msg}] {
          input.parameters.readOnlyRootFilesystem == true
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := sprintf("Container %v must have read-only root filesystem", [container.name])
        }
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: K8sSecurityContext
metadata:
  name: security-context-required
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
    excludedNamespaces: ["kube-system", "gatekeeper-system", "istio-system"]
  parameters:
    runAsNonRoot: true
    readOnlyRootFilesystem: false