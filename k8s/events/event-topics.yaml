apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topics-config
  namespace: messaging
data:
  create-topics.sh: |
    #!/bin/bash
    
    KAFKA_BROKERS="kafka-0.kafka.messaging.svc.cluster.local:9092,kafka-1.kafka.messaging.svc.cluster.local:9092,kafka-2.kafka.messaging.svc.cluster.local:9092"
    
    # E-commerce Domain Topics
    
    # User Domain Events
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic user.created \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=604800000 \
      --config cleanup.policy=compact
    
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic user.updated \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=604800000 \
      --config cleanup.policy=compact
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic user.deleted \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=delete
    
    # Product Domain Events  
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic product.created \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=compact
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic product.updated \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=compact
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic product.price.changed \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=compact
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic product.inventory.updated \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=compact
    
    # Order Domain Events
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic order.created \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic order.confirmed \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic order.cancelled \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic order.shipped \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic order.delivered \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
    
    # Cart Domain Events
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic cart.item.added \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=86400000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic cart.item.removed \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=86400000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic cart.cleared \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=86400000 \
      --config cleanup.policy=delete
    
    # Payment Domain Events
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic payment.initiated \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic payment.completed \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic payment.failed \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=7776000000 \
      --config cleanup.policy=delete
    
    # Notification Domain Events
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic notification.email.send \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=604800000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic notification.sms.send \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=604800000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic notification.push.send \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=604800000 \
      --config cleanup.policy=delete
    
    # Analytics and Audit Events
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic analytics.user.activity \
      --partitions 12 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic analytics.product.view \
      --partitions 12 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic audit.events \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=31536000000 \
      --config cleanup.policy=delete
    
    # Dead Letter Topics
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic dlq.order.processing \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic dlq.notification.delivery \
      --partitions 3 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=delete
      
    kafka-topics.sh --create \
      --bootstrap-server $KAFKA_BROKERS \
      --topic dlq.general \
      --partitions 6 \
      --replication-factor 3 \
      --config retention.ms=2592000000 \
      --config cleanup.policy=delete
    
    echo "All Kafka topics created successfully!"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topic-creator
  namespace: messaging
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: kafka-topic-creator
        image: confluentinc/cp-kafka:7.4.0
        command: ["/bin/bash"]
        args: ["/scripts/create-topics.sh"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        env:
        - name: KAFKA_BROKERS
          value: "kafka-0.kafka.messaging.svc.cluster.local:9092,kafka-1.kafka.messaging.svc.cluster.local:9092,kafka-2.kafka.messaging.svc.cluster.local:9092"
      volumes:
      - name: scripts
        configMap:
          name: kafka-topics-config
          defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: event-schemas
  namespace: messaging
data:
  user-events.avro: |
    {
      "namespace": "com.ecommerce.events.user",
      "type": "record",
      "name": "UserCreated",
      "fields": [
        {"name": "userId", "type": "string"},
        {"name": "email", "type": "string"},
        {"name": "firstName", "type": "string"},
        {"name": "lastName", "type": "string"},
        {"name": "timestamp", "type": "long"},
        {"name": "version", "type": "int", "default": 1}
      ]
    }
  product-events.avro: |
    {
      "namespace": "com.ecommerce.events.product",
      "type": "record", 
      "name": "ProductCreated",
      "fields": [
        {"name": "productId", "type": "string"},
        {"name": "name", "type": "string"},
        {"name": "description", "type": "string"},
        {"name": "price", "type": "double"},
        {"name": "category", "type": "string"},
        {"name": "inventory", "type": "int"},
        {"name": "timestamp", "type": "long"},
        {"name": "version", "type": "int", "default": 1}
      ]
    }
  order-events.avro: |
    {
      "namespace": "com.ecommerce.events.order",
      "type": "record",
      "name": "OrderCreated", 
      "fields": [
        {"name": "orderId", "type": "string"},
        {"name": "customerId", "type": "string"},
        {"name": "items", "type": {"type": "array", "items": {
          "type": "record",
          "name": "OrderItem",
          "fields": [
            {"name": "productId", "type": "string"},
            {"name": "quantity", "type": "int"},
            {"name": "price", "type": "double"}
          ]
        }}},
        {"name": "totalAmount", "type": "double"},
        {"name": "timestamp", "type": "long"},
        {"name": "version", "type": "int", "default": 1}
      ]
    }