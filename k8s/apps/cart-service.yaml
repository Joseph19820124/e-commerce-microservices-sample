apiVersion: v1
kind: ConfigMap
metadata:
  name: cart-service-config
  namespace: default
  labels:
    app: cart-service
    version: v1
data:
  SPRING_REDIS_HOST: "ecommerce-microservices-dev-redis.cache.amazonaws.com"
  SPRING_REDIS_PORT: "6379"
  SPRING_REDIS_TIMEOUT: "2000"
  REDIS_POOL_MAX_ACTIVE: "8"
  REDIS_POOL_MAX_IDLE: "8"
  REDIS_POOL_MIN_IDLE: "0"
  REDIS_POOL_MAX_WAIT: "-1"
  SERVER_PORT: "8080"
  LOG_LEVEL: "INFO"
  CART_CACHE_TTL: "3600"
  CART_CACHE_PREFIX: "cart:"
  CB_FAILURE_RATE_THRESHOLD: "50"
  CB_WAIT_DURATION: "10000"
  CB_SLIDING_WINDOW_SIZE: "10"
  TRACING_SAMPLING_PROBABILITY: "1.0"
  ZIPKIN_ENDPOINT: "http://jaeger-collector.tracing.svc.cluster.local:9411/api/v2/spans"
---
apiVersion: v1
kind: Secret
metadata:
  name: cart-service-secret
  namespace: default
  labels:
    app: cart-service
    version: v1
type: Opaque
stringData:
  SPRING_REDIS_PASSWORD: "your-redis-password"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart-service
  namespace: default
  labels:
    app: cart-service
    version: v1
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cart-service
      version: v1
  template:
    metadata:
      labels:
        app: cart-service
        version: v1
        environment: production
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: cart-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: cart-service
        image: harbor.ecommerce.com/ecommerce/cart-service:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: JAVA_OPTS
          value: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
        envFrom:
        - configMapRef:
            name: cart-service-config
        - secretRef:
            name: cart-service-secret
        resources:
          requests:
            memory: "768Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /var/log
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cart-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: cart-service
  namespace: default
  labels:
    app: cart-service
    version: v1
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: cart-service
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cart-service-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cart-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cart-service-pdb
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: cart-service